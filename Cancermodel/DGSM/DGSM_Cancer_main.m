% AUTHOR: An Do Dela 
% Date: May 28, 2021
% Purpose DGSM simulation cancer model 

%% Cancer model 
% A Validated Mathematical Model of Cell-Mediated Immune
% Response to Tumor Growth
% Lisette G. de Pillis, Ami E. Radunskaya
% System contains 3 differential equations and 16 parameter 
% Local parameter sensitivity anlaysis has been done in the previous study
% 
%% Parameters ranges and model outputs are stored in Parameter_settings 
clear; close all; clc; 
warning('off');

parpool % parfor parpool
tic 
Nrow= 100000;
myfun = @ligandOde; 
%% 
% We set the solver tolerance 

ODE_TOL  = 1e-10;
DIFF_INC = sqrt(ODE_TOL);

%% 
% The LHS matrix will sample each parameter over the range of uncertainty 
% with corresponding distribution which is defined by 

Parameter_settings;
k = length(pmin); % number of parameters 

%% 
% 

mat = zeros(Nrow, k); 

for i =1 : k 
    mat(:,i) = LHS_Call(pmin(i),...
 baseline(i), pmax(i), 0 ,Nrow,'unif');
end 
%%
% The matrix will be saved as a csv file to be used later. 

csvwrite('LHS.csv', mat); %save LHS matrix

%% load parameter set generated by latin hypercube sampling
mat = dlmread('LHS.csv');
% the smallest step size between each parameter values
dp = abs(min(diff(mat))); 


%% 
% We will then calculate the sensitivity matrix. For each parameter $x_i$, 
% a local sensitivity measure is calculated based on the parital derivative 
% 
% $$E_i \left(x^* \right)=\frac{\partial f}{\partial x_i }$$
% 
% THe local sensitivity measures $E_i \left(x^* \right)$ depends on a nomial 
% point $x^*$ and it changes with a change of $x^*$. This deficiency can be overcome 
% by averaging repeating $E_i \left(x^* \right)$over the parameter space. 
% 
% We are interested in anlyzing the model output for virus load at a particular 
% time point 

%time_points = 45; 
y_var = 1; 
Nrow = size(mat,1);  % LHS row number     
time_points=[25,50];

sens_mat = zeros(Nrow,k,length(time_points)); 
sens_rel_mat = sens_mat;
%out=zeros(Nrow,2);

% This portion of code is adapted from 
% Gallaher, Jill, et al. 
% "Methods for determining key components in a mathematical model for
% tumorâ€“immune dynamics in multiple myeloma." 
% Journal of theoretical biology 458 (2018): 31-46.

%% Simulating the model for each row of LHS matrix 
disp('Simulating model output for each row of sampling matrix')


parfor run_num =1:Nrow %parfor 
    f=myfun;
    opts = odeset('Events', @complexevent,'AbsTol',10^(-6)); % add AbsTol option
    t_end=50; % length of the simulations
    tspan=(0:0.5:t_end);

    f0 = zeros(size(time_points)); 
    f1 =f0;

%------------- solve ODE at a nomial value ----------------%  
    [t,y,te,~,~]=ode15s(@(t,y)f(t,y,mat,run_num),tspan,y0,opts);

    % In the event of imaginary model outcome detects
    % Tumor cells = 0  adding noise with uniform
    % distribution [10^-8, 10^-6]  from te until the end 
    % NK cells and T cells solution is calculated using closed form
    % solution 
    % N(t) = e/f + CN * exp(-f*t)
    % L(t) = exp(-m*t) + CL
    % where CN = exp(f*te) * (Ne- e/f);
    % CL = Le -exp(-m*te)
    
    
    if ~isempty(te) % event detected 
        t(end) = []; 

        rmin=10^(-8);
        rmax=10^(-6);
        nT = length(length(t)+1:length(tspan));

        % adding noise with uniform
        %distribution [10^-8, 10^-6] 

        y(length(t)+1:length(tspan),1)=rmin+rand(nT,1)*(rmax-rmin);

        teve = t(end); 
        Ne = y(length(t)-1,2); 
        Le = y(length(t)-1,3); 

        m = mat(run_num,12);
        e= mat(run_num,5);
        fpar = mat(run_num,7);

        CN = exp(fpar*teve)*(Ne-e/fpar);
        CL = Le -exp(-m*te);

        %concatenate NK killer using closed form solution 
        y(length(t):length(tspan),2) =  e/fpar + CN*exp(-fpar*...
            tspan(length(t):length(tspan)));
        y(length(t):length(tspan),3) =  exp(-m*...
            tspan(length(t):length(tspan)))+CL;
    end

    f0 = [y(tspan==time_points(1),y_var)...
                     y(tspan==time_points(2),y_var)]; 
    

    for j = 1:k

        % for each parameter, slightly perturb its value and evaluate the function 
        epsnew = DIFF_INC;

        % parameter delta step = nonzero smallest parameter difference step


        if epsnew > dp(j) 
            epsnew = dp(j)/2; 
        end 

        new_mat = mat(run_num,:); % extract the nomial row of LHS 
        new_mat(j) = new_mat(j)+ epsnew; %perturb x_j value 

        [t,y,te,~,~]=ode15s(@(t,y)f(t,y,new_mat,1),tspan,y0,opts);
        
        % In the event of imaginary model outcome detects
        % Tumor cells = 0  adding noise with uniform
        % distribution [10^-8, 10^-6]  from te until the end 
        % NK cells and T cells solution is calculated using closed form
        % solution 
        % N(t) = e/f + CN * exp(-f*t)
        % L(t) = exp(-m*t) + CL
        % where CN = exp(f*te) * (Ne- e/f);
        % CL = Le -exp(-m*te)
        
        if ~isempty(te) % event detected 
            t(end) = []; 

            rmin=10^(-8);
            rmax=10^(-6);
            nT = length(length(t)+1:length(tspan));

            % adding noise with uniform
            %distribution [10^-8, 10^-6] 

            y(length(t)+1:length(tspan),1)=rmin+rand(nT,1)*(rmax-rmin);

            teve = t(end); 
            Ne = y(length(t)-1,2); 
            Le = y(length(t)-1,3); 

            m = new_mat(1,12);
            e= new_mat(1,5);
            fpar = new_mat(1,7);

            CN = exp(fpar*teve)*(Ne-e/fpar);
            CL = Le -exp(-m*te);

            %concatenate NK killer using closed form solution 
            y(length(t):length(tspan),2) =  e/fpar + CN*exp(-fpar*...
                tspan(length(t):length(tspan)));
            y(length(t):length(tspan),3) =  exp(-m*...
                tspan(length(t):length(tspan)))+CL;
        end

        f1 = [y(tspan==time_points(1),y_var)...
                     y(tspan==time_points(2),y_var)]; 

        %%Relative sensitivity = change in glucose/epsilon
        %sens_mat(run_num,j,:)   = (f1 - f0)/(epsnew);
        sens_mat(run_num,j,:)   = (f1 - f0)/(f0*epsnew); %mod May 28
        sens_rel_mat(run_num,j,:) = squeeze(sens_mat(run_num,j,:))'./...
            f0;

    end% j parameter



end %run_num


% csvwrite('sens_mat.csv', sens_mat);
% csvwrite('sens_rel_mat.csv', sens_rel_mat);


elapse = toc;

%dlmwrite('derivative_runtime.csv',elapse,'-append');
save('Derivative_Cancer_data.mat','mat',...
    'sens_mat','sens_rel_mat');

delete(gcp('nocreate'))

%% 
% load('Derivative_data_May20.mat');
% Parameter_settings;
% 
% S = sens_rel_mat; 
% days = [25,50];
% [~,K,nT]=size(S);
% 
% S_der= squeeze(ave./sd);
% S_der(end,:) = []; %remove dummy parameter statistics 
% Gi = zeros(K-1,nT);
% ratio = Gi;
% 
% for i =1:nT % timepoint 
%     ave = mean(abs(S(:,1:K-1,i)));
%     sd = std(abs(S(:,1:K-1,i)));
%     Gi(:,i) = sqrt(ave.^2 + sd.^2);
%     ratio(:,i) = ave./sd;
% end



